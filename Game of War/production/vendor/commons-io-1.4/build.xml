<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
   
         http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<project name="Commons IO" default="jar" basedir=".">


<!--
        "IO" component of the Apache Commons Subproject
        $Id: build.xml 612689 2008-01-17 03:04:28Z niallp $
        $Revision: 612689 $ $Date: 2008-01-17 03:04:28 +0000 (Thu, 17 Jan 2008) $
-->


<!-- ========== Initialize Properties ===================================== -->


  <property file="project.properties"/>              <!-- Project local   -->
  <property file="build.properties"/>                <!-- Component local   -->
  <property file="${user.home}/build.properties"/>   <!-- User local        -->


<!-- ========== External Dependencies ===================================== -->


  <!-- The directories corresponding to your necessary dependencies -->
  <property name="junit.home"              value="/usr/local/junit3.8.1"/>
  <property name="junit.jar"               value="${junit.home}/junit.jar"/>


<!-- ========== Component Declarations ==================================== -->


  <!-- The name of this component -->
  <property name="component.name"          value="commons-io"/>

  <!-- The primary package name of this component -->
  <property name="component.package"       value="org.apache.commons.io"/>

  <!-- The title of this component -->
  <property name="component.title"         value="Commons IO"/>

  <!-- The current version number of this component -->
  <property name="component.version"       value="1.4"/>

  <!-- The base directory for component sources -->
  <property name="source.home"             value="src/java"/>

  <!-- The base directory for unit test sources -->
  <property name="test.home"               value="src/test"/>

  <!-- Download lib dir -->
  <property name="download.lib.dir"        value="lib"/>

  <!-- The base directory for compilation targets -->
  <property name="build.home"              value="target"/>

  <!-- The base directory for distribution targets -->
  <property name="dist.home"               value="${build.home}/dist"/>

  <!-- Base file name for dist files -->
  <property name="final.name"        value="${component.name}-${component.version}"/>

  <!-- Directory where binary release files are staged -->
  <property name="stage.bin.dir"           value="${dist.home}/stage-bin"/>

  <!-- Directory where source release files are staged -->
  <property name="stage.src.dir"           value="${dist.home}/stage-src"/>

<!-- ========== Compiler Defaults ========================================= -->

  <!-- Should Java compilations set the 'debug' compiler option? -->
  <property name="compile.debug"           value="true"/>

  <!-- Should Java compilations set the 'deprecation' compiler option? -->
  <property name="compile.deprecation"     value="false"/>

  <!-- Should Java compilations set the 'optimize' compiler option? -->
  <property name="compile.optimize"        value="true"/>

  <!-- Construct compile classpath -->
  <path id="compile.classpath">
    <pathelement location="${build.home}/classes"/>
  </path>

  <!-- Construct compile classpath -->
  <path id="downloaded.lib.classpath">
    <pathelement location="${download.lib.dir}/junit.jar"/>
  </path>

<!-- ========== Test Execution Defaults =================================== -->


  <!-- Construct unit test classpath -->
  <path id="test.classpath">
    <pathelement location="${build.home}/classes"/>
    <pathelement location="${build.home}/test-classes"/>
    <pathelement location="${junit.jar}"/>
    <path refid="downloaded.lib.classpath"/>
  </path>

  <!-- Should all tests fail if one does? -->
  <property name="test.failonerror"        value="true"/>

  <!-- The test runner to execute -->
  <property name="test.runner"             value="junit.textui.TestRunner"/>


<!-- ========== Executable Targets ======================================== -->

  <target name="clean" description="Clean build and distribution directories">
    <delete    dir="${build.home}"/>
    <delete    dir="test"/>
  </target>


  <target name="init"
   description="Initialize and evaluate conditionals">
    <echo message="-------- ${component.title} ${component.version} --------"/>
    <filter  token="name"                  value="${component.name}"/>
    <filter  token="package"               value="${component.package}"/>
    <filter  token="version"               value="${component.version}"/>
    <filter  token="compilesource"         value="${compile.source}"/>
    <filter  token="compiletarget"         value="${compile.target}"/>
    <tstamp/>
    <mkdir dir="${build.home}"/>
    <mkdir dir="${build.home}/classes"/>
    <mkdir dir="${build.home}/test-classes"/>
  </target>

<!-- ========== Compile Targets =========================================== -->

  <target name="compile" depends="init" description="Compile dependant on JDK version">
    <condition property="is.jdk13">
      <equals arg1="${ant.java.version}" arg2="1.3" />
    </condition>
    <condition property="not.jdk13">
      <not><equals arg1="${ant.java.version}" arg2="1.3" /></not>
    </condition>
    <antcall target="compile.jdk13" />
    <antcall target="compile.all" />
  </target>

  <!-- Compile all classes -->
  <target name="compile.all" unless="is.jdk13"
          description="Compile ALL classes">
    <echo message="*** Compiling all classes ***" />

    <!-- check JDK 1.4 -->
    <fail message="switch to JDK 1.4+">
      <condition>
        <equals arg1="${ant.java.version}" arg2="1.3" />
      </condition>
    </fail>

    <javac  srcdir="${source.home}"
           destdir="${build.home}/classes"
             source="${maven.compile.source}"
             target="${maven.compile.target}"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

  <!-- Compile excluding JDK 1.4 classes -->
  <target name="compile.jdk13" unless="not.jdk13"
          description="Compile ONLY JDK 1.3 compatible classes ">
    <echo message="*** Compiling ONLY JDK 1.3 compatible classes ***" />

    <!-- check JDK 1.3 -->
    <fail message="switch to JDK 1.3">
      <condition>
        <not><equals arg1="${ant.java.version}" arg2="1.3" /></not>
      </condition>
    </fail>
    <javac  srcdir="${source.home}"
           destdir="${build.home}/classes"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
      <include name="**/*.java"/>
      <exclude name="**/CharSequenceReader.java"/>
      <exclude name="**/IOExceptionWithCause.java"/>
      <exclude name="**/RegexFileFilter.java"/>
      <exclude name="**/FileWriterWithEncoding.java"/>
    </javac>
  </target>


<!-- ========== Unit Test Targets ========================================= -->

    <target name="compile.tests" depends="compile, download-dependencies" description="Compile unit test cases dependant on JDK version">
      <antcall target="compile.tests.jdk13" />
      <antcall target="compile.tests.all" />
    </target>
    
    <!-- Compile all classes -->
    <target name="compile.tests.all" unless="is.jdk13"
            description="Compile ALL test classes">
      <echo message="*** Compiling all test classes ***" />

      <!-- check JDK 1.4 -->
      <fail message="switch to JDK 1.4+">
        <condition>
          <equals arg1="${ant.java.version}" arg2="1.3" />
        </condition>
      </fail>

      <javac srcdir="${test.home}"
             destdir="${build.home}/test-classes"
             debug="${compile.debug}"
             deprecation="${compile.deprecation}"
             optimize="${compile.optimize}">
          <classpath refid="test.classpath"/>
      </javac>
    </target>

    <!-- Compile excluding JDK 1.4 classes -->
    <target name="compile.tests.jdk13" unless="not.jdk13"
            description="Compile ONLY JDK 1.3 compatible test classes ">
      <echo message="*** Compiling ONLY JDK 1.3 compatible test classes ***" />

      <fail message="switch to JDK 1.3">
        <condition>
          <not><equals arg1="${ant.java.version}" arg2="1.3" /></not>
        </condition>
      </fail>
      <javac srcdir="${test.home}"
               destdir="${build.home}/test-classes"
               debug="${compile.debug}"
               deprecation="${compile.deprecation}"
               optimize="${compile.optimize}">             
          <classpath refid="test.classpath"/>
          <include name="**/*.java"/>            
          <exclude name="**/RegexFileFilterTestCase.java"/>
          <exclude name="**/FileWriterWithEncodingTest.java"/>
          <exclude name="**/IOExceptionWithCauseTestCase.java"/>
          <exclude name="**/CharSequenceReaderTest.java"/>
      </javac>
    </target>

  <target name="test"  depends="compile.tests"
                       description="Run all unit test cases">
      <antcall target="run.tests.jdk13" />
      <antcall target="run.tests.jdk14" />
  </target>

  <target name="run.tests.jdk13"
          description="Run ONLY JDK 1.3 compatible test classes ">

    <echo message="**** Running JDK 1.3 compatible test classes ****"/>

    <antcall target="exec.test"><param name="testclass" value="org.apache.commons.io.PackageTestSuite"/></antcall>
    <antcall target="exec.test"><param name="testclass" value="org.apache.commons.io.comparator.PackageTestSuite"/></antcall>
    <antcall target="exec.test"><param name="testclass" value="org.apache.commons.io.filefilter.PackageTestSuite"/></antcall>
    <antcall target="exec.test"><param name="testclass" value="org.apache.commons.io.input.PackageTestSuite"/></antcall>
    <antcall target="exec.test"><param name="testclass" value="org.apache.commons.io.output.PackageTestSuite"/></antcall>

  </target>

  <target name="run.tests.jdk14"  unless="is.jdk13"
          description="Run ONLY tests requiring JDK 1.4">

    <echo message="**** Running tests requiring JDK 1.4 ****"/>

    <!-- check JDK 1.4 -->
    <fail message="switch to JDK 1.4+">
      <condition>
        <equals arg1="${ant.java.version}" arg2="1.3" />
      </condition>
    </fail>

    <antcall target="exec.test"><param name="testclass" value="org.apache.commons.io.IOExceptionWithCauseTestCase"/></antcall>
    <antcall target="exec.test"><param name="testclass" value="org.apache.commons.io.filefilter.RegexFileFilterTestCase"/></antcall>
    <antcall target="exec.test"><param name="testclass" value="org.apache.commons.io.input.CharSequenceReaderTest"/></antcall>
    <antcall target="exec.test"><param name="testclass" value="org.apache.commons.io.output.FileWriterWithEncodingTest"/></antcall>

  </target>

  <target name="exec.test" description="Run a unit test case">
    <echo message="Running Test ${testclass} ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <arg value="${testclass}"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>


<!-- ========== Produce JavaDocs ========================================== -->

  <target name="javadoc" depends="compile" description="Create component Javadoc documentation">
    <mkdir dir="${build.home}/apidocs"/>
    <tstamp>
        <format property="current.year" pattern="yyyy"/>
    </tstamp>
    <javadoc sourcepath="${source.home}"
                destdir="${build.home}/apidocs"
           packagenames="org.apache.commons.*"
                 author="true"
                private="true"
                version="true"
               doctitle="&lt;h1&gt;${component.title} ${component.version}&lt;/h1&gt;"
            windowtitle="${component.title} ${component.version}"
                 bottom="Copyright (c) 2002-${current.year}  Apache Software Foundation"
           classpathref="compile.classpath" />
  </target>


<!-- ========== Create Jar ================================================ -->

  <target name="jar" depends="compile" description="Create jar file">

    <mkdir dir="${build.home}/classes/META-INF"/>
    <copy file="LICENSE.txt" tofile="${build.home}/classes/META-INF/LICENSE.txt"/>
    <copy file="NOTICE.txt"  tofile="${build.home}/classes/META-INF/NOTICE.txt"/>

    <manifest file="${build.home}/MANIFEST.MF">
        <attribute name="Specification-Title"      value="${component.title}"/>
        <attribute name="Specification-Version"    value="${component.version}"/>
        <attribute name="Specification-Vendor"     value="Apache Software Foundation"/>
        <attribute name="Implementation-Title"     value="${component.title}"/>
        <attribute name="Implementation-Version"   value="${component.version}"/> 
        <attribute name="Implementation-Vendor"    value="Apache Software Foundation"/>
        <attribute name="Implementation-Vendor-Id" value="org.apache"/>
        <attribute name="X-Compile-Source-JDK"     value="${maven.compile.source}"/>
        <attribute name="X-Compile-Target-JDK"     value="${maven.compile.target}"/>
    </manifest>

    <jar jarfile="${build.home}/${final.name}.jar"
         basedir="${build.home}/classes"
        manifest="${build.home}/MANIFEST.MF"/>
  </target>


<!-- ========== Distribution Target =========================================== -->

  <target name="dist" depends="clean,jar,javadoc" description="Create distribution artifacts">

    <mkdir dir="${dist.home}"/>

    <!-- jar(s) -->
    <copy todir="${dist.home}">
      <fileset dir=".">
        <include name="RELEASE-NOTES.txt"/>
      </fileset>
      <fileset dir="${build.home}">
        <include name="*.jar"/>
      </fileset>
    </copy>

    <!-- Binary Distro -->
    <mkdir dir="${stage.bin.dir}/${final.name}"/>
    <copy todir="${stage.bin.dir}/${final.name}">
      <fileset dir=".">
        <include name="LICENSE.txt"/>
        <include name="NOTICE.txt"/>
        <include name="RELEASE-NOTES.txt"/>
      </fileset>
      <fileset dir="${build.home}">
        <include name="*.jar"/>
      </fileset>
    </copy>
    <copy todir="${stage.bin.dir}/${final.name}/apidocs">
      <fileset dir="${build.home}/apidocs" />
    </copy>

    <!-- Source Distro -->
    <mkdir dir="${stage.src.dir}/${final.name}-src"/>
    <copy todir="${stage.src.dir}/${final.name}-src">
      <fileset dir=".">
        <include name="build.xml"/>
        <include name="build-check-jdk13.xml"/>
        <include name="checkstyle.xml"/>
        <include name="LICENSE.txt"/>
        <include name="maven.xml"/>
        <include name="NOTICE.txt"/>
        <include name="pom.xml"/>
        <include name="project.properties"/>
        <include name="project.xml"/>
        <include name="PROPOSAL.html"/>
        <include name="RELEASE-NOTES.txt"/>
      </fileset>
    </copy>
    <copy todir="${stage.src.dir}/${final.name}-src/src">
      <fileset dir="src" />
    </copy>
    <copy todir="${stage.src.dir}/${final.name}-src/xdocs">
      <fileset dir="xdocs" />
    </copy>

    <zip  zipfile="${dist.home}/${final.name}.zip"     basedir="${stage.bin.dir}"/>
    <zip  zipfile="${dist.home}/${final.name}-src.zip" basedir="${stage.src.dir}"/>
    <tar  tarfile="${dist.home}/${final.name}.tar"     basedir="${stage.bin.dir}" longfile="gnu"/>
    <tar  tarfile="${dist.home}/${final.name}-src.tar" basedir="${stage.src.dir}" longfile="gnu"/>
    <gzip     src="${dist.home}/${final.name}.tar"     zipfile="${dist.home}/${final.name}.tar.gz"/>
    <gzip     src="${dist.home}/${final.name}-src.tar" zipfile="${dist.home}/${final.name}-src.tar.gz"/>

    <!-- clean up staging directories -->
    <delete    dir="${stage.bin.dir}"/>
    <delete    dir="${stage.src.dir}"/>

  </target>


<!-- ========== Gump Target ===================================================== -->

  <target name="gump" depends="clean,test,javadoc,jar" description="Gump Target - clean,test,javadoc,jar"/>


<!-- ========== Download Dependencies =========================================== -->

    <target name="download-dependencies" 
           depends="check-availability" unless="skip.download">
        <echo message="doing download-dependencies..." />
        <antcall target="download-junit" />
    </target>

    <target name="check-availability">
        <echo message="doing check-availability..." />
        <available file="${junit.jar}" property="junit.found"/>
    </target>

    <target name="download-junit" unless="junit.found">
        <echo message="Downloading junit..."/>
        <mkdir dir="${download.lib.dir}" />
        <get dest="${download.lib.dir}/junit.jar"
            usetimestamp="true" ignoreerrors="true"
            src="http://www.ibiblio.org/maven/junit/jars/junit-3.8.1.jar"/>
    </target>
      
</project>

