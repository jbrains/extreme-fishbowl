/* Generated By:JavaCC: Do not edit this line. PropertyListParserTokenManager.java */
package org.apache.commons.configuration.plist;

class PropertyListParserTokenManager implements PropertyListParserConstants
{
    public java.io.PrintStream debugStream = System.out;

    public void setDebugStream(java.io.PrintStream ds)
    {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0)
    {
        switch (pos)
        {
            case 0:
                if ((active0 & 0x2000L) != 0L)
                {
                    return 8;
                }
                if ((active0 & 0x8000L) != 0L)
                {
                    return 14;
                }
                if ((active0 & 0x800000L) != 0L)
                {
                    jjmatchedKind = 21;
                    return 8;
                }
                if ((active0 & 0x5000L) != 0L)
                {
                    return 6;
                }
                return -1;
            case 1:
                if ((active0 & 0x4000L) != 0L)
                {
                    jjmatchedKind = 21;
                    jjmatchedPos = 1;
                    return 3;
                }
                return -1;
            default :
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0)
    {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private final int jjStopAtPos(int pos, int kind)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private final int jjStartNfaWithStates_0(int pos, int kind, int state)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_0()
    {
        switch (curChar)
        {
            case 34:
                return jjStartNfaWithStates_0(0, 15, 14);
            case 40:
                return jjStopAtPos(0, 5);
            case 41:
                return jjStopAtPos(0, 6);
            case 44:
                return jjStopAtPos(0, 7);
            case 59:
                return jjStopAtPos(0, 10);
            case 60:
                jjmatchedKind = 12;
                return jjMoveStringLiteralDfa1_0(0x4000L);
            case 61:
                return jjStopAtPos(0, 11);
            case 62:
                return jjStartNfaWithStates_0(0, 13, 8);
            case 92:
                return jjMoveStringLiteralDfa1_0(0x800000L);
            case 123:
                return jjStopAtPos(0, 8);
            case 125:
                return jjStopAtPos(0, 9);
            default :
                return jjMoveNfa_0(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_0(long active0)
    {
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar)
        {
            case 34:
                if ((active0 & 0x800000L) != 0L)
                {
                    return jjStopAtPos(1, 23);
                }
                break;
            case 42:
                return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
            default :
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
        {
            return jjStartNfa_0(0, old0);
        }
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar)
        {
            case 68:
                if ((active0 & 0x4000L) != 0L)
                {
                    return jjStartNfaWithStates_0(2, 14, 15);
                }
                break;
            default :
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    private final void jjCheckNAdd(int state)
    {
        if (jjrounds[state] != jjround)
        {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private final void jjAddStates(int start, int end)
    {
        do
        {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        }
        while (start++ != end);
    }

    private final void jjCheckNAddTwoStates(int state1, int state2)
    {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private final void jjCheckNAddStates(int start, int end)
    {
        do
        {
            jjCheckNAdd(jjnextStates[start]);
        }
        while (start++ != end);
    }

    private final void jjCheckNAddStates(int start)
    {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }

    static final long[] jjbitVec0 = {
            0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };

    private final int jjMoveNfa_0(int startState, int curPos)
    {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 14;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (; ;)
        {
            if (++jjround == 0x7fffffff)
            {
                ReInitRounds();
            }
            if (curChar < 64)
            {
                long l = 1L << curChar;
                MatchLoop:
                do
                {
                    switch (jjstateSet[--i])
                    {
                        case 15:
                            if ((0xd7ffecfaffffd9ffL & l) != 0L)
                            {
                                if (kind > 21)
                                {
                                    kind = 21;
                                }
                                jjCheckNAdd(8);
                            }
                            if ((0x7ff280100000000L & l) != 0L)
                            {
                                jjCheckNAddTwoStates(4, 5);
                            }
                            else if (curChar == 62)
                            {
                                if (kind > 20)
                                {
                                    kind = 20;
                                }
                            }
                            break;
                        case 6:
                            if ((0xd7ffecfaffffd9ffL & l) != 0L)
                            {
                                if (kind > 21)
                                {
                                    kind = 21;
                                }
                                jjCheckNAdd(8);
                            }
                            if ((0x3ff000100002600L & l) != 0L)
                            {
                                jjCheckNAddTwoStates(1, 2);
                            }
                            else if (curChar == 42)
                            {
                                jjstateSet[jjnewStateCnt++] = 3;
                            }
                            else if (curChar == 62)
                            {
                                if (kind > 19)
                                {
                                    kind = 19;
                                }
                            }
                            break;
                        case 14:
                            if ((0xfffffffbffffffffL & l) != 0L)
                            {
                                jjCheckNAddStates(0, 2);
                            }
                            else if (curChar == 34)
                            {
                                if (kind > 22)
                                {
                                    kind = 22;
                                }
                            }
                            break;
                        case 3:
                        case 8:
                            if ((0xd7ffecfaffffd9ffL & l) == 0L)
                            {
                                break;
                            }
                            if (kind > 21)
                            {
                                kind = 21;
                            }
                            jjCheckNAdd(8);
                            break;
                        case 0:
                            if ((0xd7ffecfaffffd9ffL & l) != 0L)
                            {
                                if (kind > 21)
                                {
                                    kind = 21;
                                }
                                jjCheckNAdd(8);
                            }
                            else if (curChar == 34)
                            {
                                jjCheckNAddStates(0, 2);
                            }
                            if (curChar == 60)
                            {
                                jjstateSet[jjnewStateCnt++] = 6;
                            }
                            if (curChar == 60)
                            {
                                jjCheckNAddTwoStates(1, 2);
                            }
                            break;
                        case 1:
                            if ((0x3ff000100002600L & l) != 0L)
                            {
                                jjCheckNAddTwoStates(1, 2);
                            }
                            break;
                        case 2:
                            if (curChar == 62 && kind > 19)
                            {
                                kind = 19;
                            }
                            break;
                        case 4:
                            if ((0x7ff280100000000L & l) != 0L)
                            {
                                jjCheckNAddTwoStates(4, 5);
                            }
                            break;
                        case 5:
                            if (curChar == 62 && kind > 20)
                            {
                                kind = 20;
                            }
                            break;
                        case 7:
                            if (curChar == 60)
                            {
                                jjstateSet[jjnewStateCnt++] = 6;
                            }
                            break;
                        case 9:
                        case 11:
                            if (curChar == 34)
                            {
                                jjCheckNAddStates(0, 2);
                            }
                            break;
                        case 10:
                            if ((0xfffffffbffffffffL & l) != 0L)
                            {
                                jjCheckNAddStates(0, 2);
                            }
                            break;
                        case 13:
                            if (curChar == 34 && kind > 22)
                            {
                                kind = 22;
                            }
                            break;
                        default :
                            break;
                    }
                }
                while (i != startsAt);
            }
            else if (curChar < 128)
            {
                long l = 1L << (curChar & 077);
                MatchLoop:
                do
                {
                    switch (jjstateSet[--i])
                    {
                        case 15:
                            if ((0xd7ffffffffffffffL & l) != 0L)
                            {
                                if (kind > 21)
                                {
                                    kind = 21;
                                }
                                jjCheckNAdd(8);
                            }
                            if (curChar == 90)
                            {
                                jjCheckNAddTwoStates(4, 5);
                            }
                            break;
                        case 6:
                            if ((0xd7ffffffffffffffL & l) != 0L)
                            {
                                if (kind > 21)
                                {
                                    kind = 21;
                                }
                                jjCheckNAdd(8);
                            }
                            if ((0x7e0000007eL & l) != 0L)
                            {
                                jjCheckNAddTwoStates(1, 2);
                            }
                            break;
                        case 14:
                            jjCheckNAddStates(0, 2);
                            if (curChar == 92)
                            {
                                jjstateSet[jjnewStateCnt++] = 11;
                            }
                            break;
                        case 3:
                            if ((0xd7ffffffffffffffL & l) != 0L)
                            {
                                if (kind > 21)
                                {
                                    kind = 21;
                                }
                                jjCheckNAdd(8);
                            }
                            if (curChar == 68)
                            {
                                jjCheckNAddTwoStates(4, 5);
                            }
                            break;
                        case 0:
                        case 8:
                            if ((0xd7ffffffffffffffL & l) == 0L)
                            {
                                break;
                            }
                            if (kind > 21)
                            {
                                kind = 21;
                            }
                            jjCheckNAdd(8);
                            break;
                        case 1:
                            if ((0x7e0000007eL & l) != 0L)
                            {
                                jjCheckNAddTwoStates(1, 2);
                            }
                            break;
                        case 4:
                            if (curChar == 90)
                            {
                                jjCheckNAddTwoStates(4, 5);
                            }
                            break;
                        case 10:
                            jjCheckNAddStates(0, 2);
                            break;
                        case 12:
                            if (curChar == 92)
                            {
                                jjstateSet[jjnewStateCnt++] = 11;
                            }
                            break;
                        default :
                            break;
                    }
                }
                while (i != startsAt);
            }
            else
            {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop:
                do
                {
                    switch (jjstateSet[--i])
                    {
                        case 15:
                        case 8:
                            if ((jjbitVec0[i2] & l2) == 0L)
                            {
                                break;
                            }
                            if (kind > 21)
                            {
                                kind = 21;
                            }
                            jjCheckNAdd(8);
                            break;
                        case 6:
                            if ((jjbitVec0[i2] & l2) == 0L)
                            {
                                break;
                            }
                            if (kind > 21)
                            {
                                kind = 21;
                            }
                            jjCheckNAdd(8);
                            break;
                        case 14:
                        case 10:
                            if ((jjbitVec0[i2] & l2) != 0L)
                            {
                                jjCheckNAddStates(0, 2);
                            }
                            break;
                        case 3:
                            if ((jjbitVec0[i2] & l2) == 0L)
                            {
                                break;
                            }
                            if (kind > 21)
                            {
                                kind = 21;
                            }
                            jjCheckNAdd(8);
                            break;
                        case 0:
                            if ((jjbitVec0[i2] & l2) == 0L)
                            {
                                break;
                            }
                            if (kind > 21)
                            {
                                kind = 21;
                            }
                            jjCheckNAdd(8);
                            break;
                        default :
                            break;
                    }
                }
                while (i != startsAt);
            }
            if (kind != 0x7fffffff)
            {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
            {
                return curPos;
            }
            try
            {
                curChar = input_stream.readChar();
            }
            catch (java.io.IOException e)
            {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = {
            10, 12, 13,
    };
    public static final String[] jjstrLiteralImages = {
            "", null, null, null, null, "\50", "\51", "\54", "\173", "\175", "\73", "\75",
            "\74", "\76", "\74\52\104", "\42", null, null, null, null, null, null, null,
            "\134\42",};
    public static final String[] lexStateNames = {
            "DEFAULT",
    };
    static final long[] jjtoToken = {
            0xf8ffe1L,
    };
    static final long[] jjtoSkip = {
            0x1eL,
    };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[14];
    private final int[] jjstateSet = new int[28];
    protected char curChar;

    public PropertyListParserTokenManager(SimpleCharStream stream)
    {
        if (SimpleCharStream.staticFlag)
        {
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        }
        input_stream = stream;
    }

    public PropertyListParserTokenManager(SimpleCharStream stream, int lexState)
    {
        this(stream);
        SwitchTo(lexState);
    }

    public void ReInit(SimpleCharStream stream)
    {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private final void ReInitRounds()
    {
        int i;
        jjround = 0x80000001;
        for (i = 14; i-- > 0;)
        {
            jjrounds[i] = 0x80000000;
        }
    }

    public void ReInit(SimpleCharStream stream, int lexState)
    {
        ReInit(stream);
        SwitchTo(lexState);
    }

    public void SwitchTo(int lexState)
    {
        if (lexState >= 1 || lexState < 0)
        {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        }
        else
        {
            curLexState = lexState;
        }
    }

    protected Token jjFillToken()
    {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();
        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public Token getNextToken()
    {
        int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop :
        for (; ;)
        {
            try
            {
                curChar = input_stream.BeginToken();
            }
            catch (java.io.IOException e)
            {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            try
            {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
                {
                    curChar = input_stream.BeginToken();
                }
            }
            catch (java.io.IOException e1)
            {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff)
            {
                if (jjmatchedPos + 1 < curPos)
                {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                }
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
                {
                    matchedToken = jjFillToken();
                    return matchedToken;
                }
                else
                {
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try
            {
                input_stream.readChar();
                input_stream.backup(1);
            }
            catch (java.io.IOException e1)
            {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r')
                {
                    error_line++;
                    error_column = 0;
                }
                else
                {
                    error_column++;
                }
            }
            if (!EOFSeen)
            {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

}
