<?xml version="1.0" encoding="UTF-8"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!--build.xml generated by maven from project.xml version 1.1-dev
  on date January 29 2005, time 1728-->

<project default="jar" name="commons-configuration" basedir=".">

  <!-- Manual changes for dealing with the conf directory and jdbc dependency -->
  <property file="build.properties"/>
  <property file="default.properties"/>
  <property name="confdir" value="conf"/>
  <!-- Manual changes end -->

  <property name="defaulttargetdir" value="${build.home}">
  </property>
  <property name="libdir" value="${build.home}/lib">
  </property>
  <property name="classesdir" value="${build.home}/classes">
  </property>
  <property name="metadir" value="${classesdir}/META-INF"/>
  <property name="testclassesdir" value="${build.home}/test-classes">
  </property>
  <property name="testclassesdir" value="${build.home}/test-classes">
  </property>
  <property name="testreportdir" value="${build.home}/test-reports">
  </property>
  <property name="distdir" value="dist">
  </property>
  <property name="javadocdir" value="dist/docs/api">
  </property>
  <property name="targetconfdir" value="${testclassesdir}"/>
  <property name="repository" value="http://repo1.maven.org/maven2"/>

  <path id="build.classpath">
    <fileset dir="${libdir}">
      <include name="**/*.jar">
      </include>
    </fileset>
  </path>

  <target name="init" description="o Initializes some properties">
    <filter token="name" value="${component.name}"/>
    <filter token="package" value="${component.package}"/>
    <filter token="version" value="${component.version}"/>
    <mkdir dir="${libdir}">
    </mkdir>
    <condition property="noget">
      <equals arg2="only" arg1="${build.sysclasspath}">
      </equals>
    </condition>
    <!--Test if JUNIT is present in ANT classpath-->

    <available property="Junit.present" classname="junit.framework.Test">
    </available>
  </target>
  
  <!-- Copies the jdbc-stdext jar in the lib directory if the dependency is defined -->
  <target name="copy-jdbc-dep" if="dependency.jdbc">
    <copy todir="${libdir}" file="${dependency.jdbc}"/>
  </target>
  
  <target name="compile" description="o Compile the code"
    depends="get-deps, copy-jdbc-dep">
    <mkdir dir="${classesdir}">
    </mkdir>
    <javac destdir="${classesdir}" deprecation="${compile.deprecation}" 
      debug="${compile.debug}" optimize="${compile.optimize}" excludes="**/package.html">
      <src>
        <pathelement location="${source.home}">
        </pathelement>
      </src>
      <classpath refid="build.classpath">
      </classpath>
    </javac>
    <copy todir="${classesdir}">
      <fileset dir="${confdir}">
        <include name="digesterRules.xml">
        </include>
        <include name="properties.dtd">
        </include>
        <include name="PropertyList-1.0.dtd">
        </include>
      </fileset>
    </copy>
  </target>

  <target name="jar" description="o Create the jar" depends="compile,test">
    <mkdir dir="${classesdir}/META-INF"/>
    <copy file="LICENSE.txt" todir="${metadir}"/>
    <copy file="NOTICE.txt" todir="${metadir}"/>
    <copy file="${conf.home}/manifest.mf" todir="${defaulttargetdir}" filtering="on"/>
    <jar jarfile="${defaulttargetdir}/${final.name}.jar" basedir="${classesdir}"
       manifest="${defaulttargetdir}/manifest.mf" excludes="**/package.html">
    </jar>
  </target>
  <target name="clean" description="o Clean up the generated directories">
    <delete dir="${defaulttargetdir}">
    </delete>
    <delete dir="${distdir}">
    </delete>
  </target>
  <target name="dist" description="o Create a distribution" depends="jar, javadoc">
    <mkdir dir="dist">
    </mkdir>
    <copy todir="dist">
      <fileset dir="${defaulttargetdir}" includes="*.jar">
      </fileset>
      <fileset dir="${basedir}" includes="LICENSE*, README*">
      </fileset>
    </copy>
  </target>
  <target name="test" description="o Run the test cases" if="test.failure" depends="internal-test">
    <fail message="There were test failures.">
    </fail>
  </target>
  <target name="internal-test" if="Junit.present" depends="junit-present,compile-tests">
    <mkdir dir="${testreportdir}">
    </mkdir>
    <junit dir="./" failureproperty="test.failure" printSummary="yes" fork="${junit.fork}"
      haltonerror="${test.failonerror}">
      <sysproperty key="basedir" value=".">
      </sysproperty>
      <formatter type="xml">
      </formatter>
      <formatter usefile="false" type="plain">
      </formatter>
      <classpath>
        <path refid="build.classpath">
        </path>
        <pathelement path="${testclassesdir}">
        </pathelement>
        <pathelement path="${classesdir}">
        </pathelement>
        <!-- Manual changes for dealing with the conf directory -->
        <pathelement path="${targetconfdir}"/>
        <!-- Manual changes end -->
        
      </classpath>
      <batchtest todir="${testreportdir}">
        <fileset dir="src/test">
          <include name="**/*Test*.java">
          </include>
          <exclude name="**/TestBasePropertiesConfiguration.java">
          </exclude>
          <exclude name="**/NonStringTestHolder.java">
          </exclude>
          <exclude name="**/TestAbstractConfiguration.java">
          </exclude>
          <exclude name="**/AbstractXPathTest.java">
          </exclude>
          <exclude name="**/AbstractCombinerTest.java"/>
          <exclude name="**/AbstractTestConfigurationEvents.java"/>
          <exclude name="**/AbstractTestFileConfigurationEvents.java"/>
          <exclude name="**/AbstractTestPListEvents.java"/>
          <exclude name="**/InterpolationTestHelper.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>
  <target name="junit-present" unless="Junit.present" depends="init">
    <echo>================================= WARNING ================================</echo>
    <echo>Junit isn't present in your ${ANT_HOME}/lib directory. Tests not executed.</echo>
    <echo>==========================================================================</echo>
  </target>
  <target name="compile-tests" if="Junit.present" depends="junit-present,compile">
    <mkdir dir="${testclassesdir}">
    </mkdir>
    <javac destdir="${testclassesdir}" deprecation="true" debug="true" optimize="false" excludes="**/package.html">
      <src>
        <pathelement location="${test.home}">
        </pathelement>
      </src>
      <classpath>
        <path refid="build.classpath">
        </path>
        <pathelement path="${classesdir}">
        </pathelement>
      </classpath>
    </javac>
    <!-- Manual changes for dealing with the conf directory -->
    <mkdir dir="${targetconfdir}"/>
    <copy todir="${targetconfdir}">
      <fileset dir="${confdir}">
        <include name="**/*.*">
        </include>
      </fileset>
    </copy>
    <mkdir dir="${targetconfdir}/org/apache/commons/configuration">
    </mkdir>
    <copy todir="${targetconfdir}/org/apache/commons/configuration">
      <fileset dir="${confdir}">
        <include name="test.properties">
        </include>
        <include name="include.properties">
        </include>
      </fileset>
    </copy>
    <!-- Manual changes end -->
  </target>
  <target name="javadoc" description="o Generate javadoc" depends="get-deps">
    <mkdir dir="${javadocdir}">
    </mkdir>
    <tstamp>
      <format pattern="2001-yyyy" property="year">
      </format>
    </tstamp>
    <property name="copyright" value="Copyright &amp;copy;  The Apache Software Foundation. All Rights Reserved.">
    </property>
    <property name="title" value="Commons Configuration ${component.version} API">
    </property>
    <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="src/java" packagenames="org.apache.commons.configuration.*">
      <classpath>
        <path refid="build.classpath">
        </path>
      </classpath>
    </javadoc>
  </target>
  <target name="get-deps" unless="noget" depends="init">
    <!--Proxy settings works only with a JDK 1.2 and higher.-->

    <setproxy>
    </setproxy>
    <get dest="${libdir}/commons-collections-3.2.1.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar">
    </get>
    <get dest="${libdir}/commons-lang-2.4.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/commons-lang/commons-lang/2.4/commons-lang-2.4.jar">
    </get>
    <get dest="${libdir}/commons-logging-1.1.1.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar">
    </get>
    <get dest="${libdir}/commons-digester-1.8.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/commons-digester/commons-digester/1.8/commons-digester-1.8.jar">
    </get>
    <get dest="${libdir}/commons-beanutils-1.8.0.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/commons-beanutils/commons-beanutils/1.8.0/commons-beanutils-1.8.0.jar">
    </get>
    <get dest="${libdir}/commons-codec-1.3.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/commons-codec/commons-codec/1.3/commons-codec-1.3.jar">
    </get>
    <get dest="${libdir}/commons-jxpath-1.3.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/commons-jxpath/commons-jxpath/1.3/commons-jxpath-1.3.jar">
    </get>
    <get dest="${libdir}/xercesImpl-2.3.0.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/xerces/xercesImpl/2.3.0/xercesImpl-2.3.0.jar">
    </get>
    <get dest="${libdir}/xalan-2.7.0.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/xalan/xalan/2.7.0/xalan-2.7.0.jar">
    </get>
    <get dest="${libdir}/xml-apis-1.0.b2.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar">
    </get>
    <get dest="${libdir}/servletapi-2.4.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/servletapi/servletapi/2.4/servletapi-2.4.jar">
    </get>
    <get dest="${libdir}/commons-dbcp-1.2.2.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/commons-dbcp/commons-dbcp/1.2.2/commons-dbcp-1.2.2.jar">
    </get>
    <get dest="${libdir}/commons-pool-1.4.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/commons-pool/commons-pool/1.4/commons-pool-1.4.jar">
    </get>
    <get dest="${libdir}/hsqldb-1.7.2.2.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/hsqldb/hsqldb/1.7.2.2/hsqldb-1.7.2.2.jar">
    </get>
    <get dest="${libdir}/dbunit-2.1.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/dbunit/dbunit/2.1/dbunit-2.1.jar">
    </get>
    <get dest="${libdir}/junit-3.8.1.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/junit/junit/3.8.1/junit-3.8.1.jar">
    </get>
    <get dest="${libdir}/junit-addons-1.4.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/junit-addons/junit-addons/1.4/junit-addons-1.4.jar">
    </get>
    <get dest="${libdir}/mockobjects-core-0.09.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/mockobjects/mockobjects-core/0.09/mockobjects-core-0.09.jar">
    </get>
    <get dest="${libdir}/mockobjects-jdk1.4-j2ee1.3-0.09.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/mockobjects/mockobjects-jdk1.4-j2ee1.3/0.09/mockobjects-jdk1.4-j2ee1.3-0.09.jar">
    </get>
    <get dest="${libdir}/maven-tasks-plugin-1.1.0.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/maven-plugins/maven-tasks-plugin/1.1.0/maven-tasks-plugin-1.1.0.jar">
    </get>
    <get dest="${libdir}/maven-findbugs-plugin-0.8.4.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/maven-plugins/maven-findbugs-plugin/0.8.4/maven-findbugs-plugin-0.8.4.jar">
    </get>
    <get dest="${libdir}/mail-1.4.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/javax/mail/mail/1.4/mail-1.4.jar">
    </get>
    <get dest="${libdir}/ant-1.6.5.jar" usetimestamp="true" ignoreerrors="true" src="${repository}/ant/ant/1.6.5/ant-1.6.5.jar">
    </get>
  </target>
  <target name="install-maven">
    <get dest="${user.home}/maven-install-latest.jar" usetimestamp="true" src="${repo}/maven/maven-install-latest.jar">
    </get>
    <unjar dest="${maven.home}" src="${user.home}/maven-install-latest.jar">
    </unjar>
  </target>
</project>
